// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Mon, 15 Oct 2018 01:04:16 +07.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package vulkan

/*
#cgo CFLAGS: -I. -DVK_NO_PROTOTYPES
#cgo noescape callVkEnumeratePhysicalDevices
#cgo noescape callVkMapMemory
#cgo noescape callVkGetImageSparseMemoryRequirements
#cgo noescape callVkGetPhysicalDeviceSparseImageFormatProperties
#cgo noescape callVkResetFences
#cgo noescape callVkWaitForFences
#cgo noescape callVkMergePipelineCaches
#cgo noescape callVkCreateGraphicsPipelines
#cgo noescape callVkCreateComputePipelines
#cgo noescape callVkAllocateCommandBuffers
#cgo noescape callVkFreeCommandBuffers
#cgo noescape callVkCmdBindDescriptorSets
#cgo noescape callVkCmdBindVertexBuffers
#cgo noescape callVkCmdWaitEvents
#cgo noescape callVkCmdExecuteCommands
#cgo noescape callVkGetPhysicalDeviceSurfacePresentModesKHR
#cgo noescape callVkGetSwapchainImagesKHR
#cgo noescape callVkGetDisplayPlaneSupportedDisplaysKHR
#cgo noescape callVkCmdBeginRenderPass

#include "vulkan/vulkan.h"
#include "vk_wrapper.h"
#include "vk_bridge.h"
#include <stdlib.h>
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// CreateInstance function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateInstance.html
func CreateInstance(pCreateInfo *InstanceCreateInfo, pAllocator *AllocationCallbacks, pInstance *Instance) Result {
	const sz = unsafe.Sizeof(C.VkInstanceCreateInfo{})
	s := (*C.VkInstanceCreateInfo)(runtime.Malloc(sz))
	pCreateInfo.cStruct(s)
	res := C.callVkCreateInstance(
		s,
		(*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)),
		(*C.VkInstance)(unsafe.Pointer(pInstance)))
	runtime.Free(unsafe.Pointer(s), sz)
	return Result(res)
}

// DestroyInstance function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyInstance.html
func DestroyInstance(instance Instance, pAllocator *AllocationCallbacks) {
	C.callVkDestroyInstance(
		*(*C.VkInstance)(unsafe.Pointer(&instance)),
		(*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)))
}

// EnumeratePhysicalDevices function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumeratePhysicalDevices.html
func EnumeratePhysicalDevices(instance Instance, pPhysicalDeviceCount *uint32, pPhysicalDevices *PhysicalDevice) Result {
	res := C.callVkEnumeratePhysicalDevices(
		*(*C.VkInstance)(unsafe.Pointer(&instance)),
		(*C.uint32_t)(unsafe.Pointer(pPhysicalDeviceCount)),
		(*C.VkPhysicalDevice)(unsafe.Pointer(pPhysicalDevices)))
	return Result(res)
}

// GetPhysicalDeviceFeatures function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceFeatures.html
func GetPhysicalDeviceFeatures(physicalDevice PhysicalDevice, pFeatures *PhysicalDeviceFeatures) {
	C.callVkGetPhysicalDeviceFeatures(
		*(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)),
		(*C.VkPhysicalDeviceFeatures)(unsafe.Pointer(pFeatures)))
}

// GetPhysicalDeviceFormatProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceFormatProperties.html
func GetPhysicalDeviceFormatProperties(physicalDevice PhysicalDevice, format Format, pFormatProperties *FormatProperties) {
	C.callVkGetPhysicalDeviceFormatProperties(
		*(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)),
		(C.VkFormat)(format),
		(*C.VkFormatProperties)(unsafe.Pointer(pFormatProperties)))
}

// GetPhysicalDeviceImageFormatProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceImageFormatProperties.html
func GetPhysicalDeviceImageFormatProperties(physicalDevice PhysicalDevice, format Format, kind ImageType, tiling ImageTiling, usage ImageUsageFlags, flags ImageCreateFlags, pImageFormatProperties *ImageFormatProperties) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cformat := (C.VkFormat)(format)
	ckind := (C.VkImageType)(kind)
	ctiling := (C.VkImageTiling)(tiling)
	cusage := (C.VkImageUsageFlags)(usage)
	cflags := (C.VkImageCreateFlags)(flags)
	__ret := C.callVkGetPhysicalDeviceImageFormatProperties(
		cphysicalDevice,
		cformat,
		ckind,
		ctiling,
		cusage,
		cflags,
		(*C.VkImageFormatProperties)(unsafe.Pointer(pImageFormatProperties)))
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceProperties.html
func GetPhysicalDeviceProperties(physicalDevice PhysicalDevice, pProperties *PhysicalDeviceProperties) {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	C.callVkGetPhysicalDeviceProperties(
		cphysicalDevice,
		(*C.VkPhysicalDeviceProperties)(unsafe.Pointer(pProperties)))
}

// GetPhysicalDeviceQueueFamilyProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html
func GetPhysicalDeviceQueueFamilyProperties(physicalDevice PhysicalDevice, pQueueFamilyPropertyCount *uint32, pQueueFamilyProperties *QueueFamilyProperties) {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cpQueueFamilyPropertyCount := (*C.uint32_t)(unsafe.Pointer(pQueueFamilyPropertyCount))
	C.callVkGetPhysicalDeviceQueueFamilyProperties(
		cphysicalDevice,
		cpQueueFamilyPropertyCount,
		(*C.VkQueueFamilyProperties)(unsafe.Pointer(pQueueFamilyProperties)))
}

// GetPhysicalDeviceMemoryProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceMemoryProperties.html
func GetPhysicalDeviceMemoryProperties(physicalDevice PhysicalDevice, pMemoryProperties *PhysicalDeviceMemoryProperties) {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	C.callVkGetPhysicalDeviceMemoryProperties(
		cphysicalDevice,
		(*C.VkPhysicalDeviceMemoryProperties)(unsafe.Pointer(pMemoryProperties)))
}

// CreateDevice function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDevice.html
func CreateDevice(physicalDevice PhysicalDevice, pCreateInfo *DeviceCreateInfo, pAllocator *AllocationCallbacks, pDevice *Device) Result {
	const sz = unsafe.Sizeof(C.VkDeviceCreateInfo{})
	s := (*C.VkDeviceCreateInfo)(runtime.Malloc(sz))
	pCreateInfo.cStruct(s)
	res := C.callVkCreateDevice(
		*(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)),
		s,
		(*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)),
		(*C.VkDevice)(unsafe.Pointer(pDevice)))
	runtime.Free(unsafe.Pointer(s), sz)
	return Result(res)
}

// DestroyDevice function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDevice.html
func DestroyDevice(device Device, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyDevice(cdevice, cpAllocator)
}

func cStr(str *string) *C.char {
	if str == nil {
		return nil
	}
	return (*C.char)(unsafe.Pointer(&([]byte(*str))[0]))
}

// EnumerateInstanceExtensionProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateInstanceExtensionProperties.html
func EnumerateInstanceExtensionProperties(pLayerName *string, pPropertyCount *uint32, pProperties *ExtensionProperties) Result {
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkEnumerateInstanceExtensionProperties(
		cStr(pLayerName),
		cpPropertyCount,
		(*C.VkExtensionProperties)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceExtensionProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateDeviceExtensionProperties.html
func EnumerateDeviceExtensionProperties(physicalDevice PhysicalDevice, pLayerName *string, pPropertyCount *uint32, pProperties *ExtensionProperties) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkEnumerateDeviceExtensionProperties(
		cphysicalDevice,
		cStr(pLayerName),
		cpPropertyCount,
		(*C.VkExtensionProperties)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// EnumerateInstanceLayerProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateInstanceLayerProperties.html
func EnumerateInstanceLayerProperties(pPropertyCount *uint32, pProperties *LayerProperties) Result {
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkEnumerateInstanceLayerProperties(
		cpPropertyCount,
		(*C.VkLayerProperties)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceLayerProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateDeviceLayerProperties.html
func EnumerateDeviceLayerProperties(physicalDevice PhysicalDevice, pPropertyCount *uint32, pProperties *LayerProperties) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkEnumerateDeviceLayerProperties(
		cphysicalDevice,
		cpPropertyCount,
		(*C.VkLayerProperties)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// GetDeviceQueue function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetDeviceQueue.html
func GetDeviceQueue(device Device, queueFamilyIndex uint32, queueIndex uint32, pQueue *Queue) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cqueueFamilyIndex := (C.uint32_t)(queueFamilyIndex)
	cqueueIndex := (C.uint32_t)(queueIndex)
	cpQueue := (*C.VkQueue)(unsafe.Pointer(pQueue))
	C.callVkGetDeviceQueue(cdevice, cqueueFamilyIndex, cqueueIndex, cpQueue)
}

// QueueSubmit function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkQueueSubmit.html
func QueueSubmit(queue Queue, submitCount uint32, pSubmits *SubmitInfo, fence Fence) Result {
	cqueue := *(*C.VkQueue)(unsafe.Pointer(&queue))
	csubmitCount := (C.uint32_t)(submitCount)
	cfence := *(*C.VkFence)(unsafe.Pointer(&fence))
	__ret := C.callVkQueueSubmit(
		cqueue,
		csubmitCount,
		(*C.VkSubmitInfo)(unsafe.Pointer(pSubmits)),
		cfence)
	__v := (Result)(__ret)
	return __v
}

// QueueWaitIdle function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkQueueWaitIdle.html
func QueueWaitIdle(queue Queue) Result {
	cqueue := *(*C.VkQueue)(unsafe.Pointer(&queue))
	__ret := C.callVkQueueWaitIdle(cqueue)
	__v := (Result)(__ret)
	return __v
}

// DeviceWaitIdle function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDeviceWaitIdle.html
func DeviceWaitIdle(device Device) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	__ret := C.callVkDeviceWaitIdle(cdevice)
	__v := (Result)(__ret)
	return __v
}

// AllocateMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkAllocateMemory.html
func AllocateMemory(device Device, pAllocateInfo *MemoryAllocateInfo, pAllocator *AllocationCallbacks, pMemory *DeviceMemory) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpMemory := (*C.VkDeviceMemory)(unsafe.Pointer(pMemory))
	__ret := C.callVkAllocateMemory(
		cdevice,
		(*C.VkMemoryAllocateInfo)(unsafe.Pointer(pAllocateInfo)),
		cpAllocator,
		cpMemory)
	__v := (Result)(__ret)
	return __v
}

// FreeMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFreeMemory.html
func FreeMemory(device Device, memory DeviceMemory, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cmemory := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkFreeMemory(cdevice, cmemory, cpAllocator)
}

// MapMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkMapMemory.html
func MapMemory(device Device, memory DeviceMemory, offset DeviceSize, size DeviceSize, flags MemoryMapFlags, ppData *unsafe.Pointer) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cmemory := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory))
	coffset := (C.VkDeviceSize)(offset)
	csize := (C.VkDeviceSize)(size)
	cflags := (C.VkMemoryMapFlags)(flags)
	cppData := ppData
	__ret := C.callVkMapMemory(cdevice, cmemory, coffset, csize, cflags, cppData)
	__v := (Result)(__ret)
	return __v
}

// UnmapMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkUnmapMemory.html
func UnmapMemory(device Device, memory DeviceMemory) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cmemory := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory))
	C.callVkUnmapMemory(cdevice, cmemory)
}

// FlushMappedMemoryRanges function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFlushMappedMemoryRanges.html
func FlushMappedMemoryRanges(device Device, memoryRangeCount uint32, pMemoryRanges *MappedMemoryRange) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cmemoryRangeCount := (C.uint32_t)(memoryRangeCount)
	__ret := C.callVkFlushMappedMemoryRanges(
		cdevice,
		cmemoryRangeCount,
		(*C.VkMappedMemoryRange)(unsafe.Pointer(pMemoryRanges)))
	__v := (Result)(__ret)
	return __v
}

// InvalidateMappedMemoryRanges function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkInvalidateMappedMemoryRanges.html
func InvalidateMappedMemoryRanges(device Device, memoryRangeCount uint32, pMemoryRanges *MappedMemoryRange) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cmemoryRangeCount := (C.uint32_t)(memoryRangeCount)
	__ret := C.callVkInvalidateMappedMemoryRanges(
		cdevice,
		cmemoryRangeCount,
		(*C.VkMappedMemoryRange)(unsafe.Pointer(pMemoryRanges)))
	__v := (Result)(__ret)
	return __v
}

// GetDeviceMemoryCommitment function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetDeviceMemoryCommitment.html
func GetDeviceMemoryCommitment(device Device, memory DeviceMemory, pCommittedMemoryInBytes *DeviceSize) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cmemory := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory))
	cpCommittedMemoryInBytes := (*C.VkDeviceSize)(unsafe.Pointer(pCommittedMemoryInBytes))
	C.callVkGetDeviceMemoryCommitment(cdevice, cmemory, cpCommittedMemoryInBytes)
}

// BindBufferMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkBindBufferMemory.html
func BindBufferMemory(device Device, buffer Buffer, memory DeviceMemory, memoryOffset DeviceSize) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	cmemory := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory))
	cmemoryOffset := (C.VkDeviceSize)(memoryOffset)
	__ret := C.callVkBindBufferMemory(cdevice, cbuffer, cmemory, cmemoryOffset)
	__v := (Result)(__ret)
	return __v
}

// BindImageMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkBindImageMemory.html
func BindImageMemory(device Device, image Image, memory DeviceMemory, memoryOffset DeviceSize) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	cmemory := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory))
	cmemoryOffset := (C.VkDeviceSize)(memoryOffset)
	__ret := C.callVkBindImageMemory(cdevice, cimage, cmemory, cmemoryOffset)
	__v := (Result)(__ret)
	return __v
}

// GetBufferMemoryRequirements function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetBufferMemoryRequirements.html
func GetBufferMemoryRequirements(device Device, buffer Buffer, pMemoryRequirements *MemoryRequirements) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	C.callVkGetBufferMemoryRequirements(
		cdevice,
		cbuffer,
		(*C.VkMemoryRequirements)(unsafe.Pointer(pMemoryRequirements)))
}

// GetImageMemoryRequirements function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetImageMemoryRequirements.html
func GetImageMemoryRequirements(device Device, image Image, pMemoryRequirements *MemoryRequirements) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	C.callVkGetImageMemoryRequirements(
		cdevice,
		cimage,
		(*C.VkMemoryRequirements)(unsafe.Pointer(pMemoryRequirements)))
}

// GetImageSparseMemoryRequirements function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetImageSparseMemoryRequirements.html
func GetImageSparseMemoryRequirements(device Device, image Image, pSparseMemoryRequirementCount *uint32, pSparseMemoryRequirements *SparseImageMemoryRequirements) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	cpSparseMemoryRequirementCount := (*C.uint32_t)(unsafe.Pointer(pSparseMemoryRequirementCount))
	C.callVkGetImageSparseMemoryRequirements(
		cdevice,
		cimage,
		cpSparseMemoryRequirementCount,
		(*C.VkSparseImageMemoryRequirements)(unsafe.Pointer(pSparseMemoryRequirements)))
}

// GetPhysicalDeviceSparseImageFormatProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html
func GetPhysicalDeviceSparseImageFormatProperties(physicalDevice PhysicalDevice, format Format, kind ImageType, samples SampleCountFlagBits, usage ImageUsageFlags, tiling ImageTiling, pPropertyCount *uint32, pProperties *SparseImageFormatProperties) {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cformat := (C.VkFormat)(format)
	ckind := (C.VkImageType)(kind)
	csamples := (C.VkSampleCountFlagBits)(samples)
	cusage := (C.VkImageUsageFlags)(usage)
	ctiling := (C.VkImageTiling)(tiling)
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	C.callVkGetPhysicalDeviceSparseImageFormatProperties(
		cphysicalDevice,
		cformat,
		ckind,
		csamples,
		cusage,
		ctiling,
		cpPropertyCount,
		(*C.VkSparseImageFormatProperties)(unsafe.Pointer(pProperties)))
}

// QueueBindSparse function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkQueueBindSparse.html
func QueueBindSparse(queue Queue, bindInfoCount uint32, pBindInfo *BindSparseInfo, fence Fence) Result {
	cqueue := *(*C.VkQueue)(unsafe.Pointer(&queue))
	cbindInfoCount := (C.uint32_t)(bindInfoCount)
	cfence := *(*C.VkFence)(unsafe.Pointer(&fence))
	__ret := C.callVkQueueBindSparse(
		cqueue,
		cbindInfoCount,
		(*C.VkBindSparseInfo)(unsafe.Pointer(pBindInfo)),
		cfence)
	__v := (Result)(__ret)
	return __v
}

// CreateFence function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateFence.html
func CreateFence(device Device, pCreateInfo *FenceCreateInfo, pAllocator *AllocationCallbacks, pFence *Fence) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpFence := (*C.VkFence)(unsafe.Pointer(pFence))
	__ret := C.callVkCreateFence(
		cdevice,
		(*C.VkFenceCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpFence)
	__v := (Result)(__ret)
	return __v
}

// DestroyFence function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyFence.html
func DestroyFence(device Device, fence Fence, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cfence := *(*C.VkFence)(unsafe.Pointer(&fence))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyFence(cdevice, cfence, cpAllocator)
}

// ResetFences function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetFences.html
func ResetFences(device Device, fenceCount uint32, pFences *Fence) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cfenceCount := (C.uint32_t)(fenceCount)
	cpFences := (*C.VkFence)(unsafe.Pointer(pFences))
	__ret := C.callVkResetFences(cdevice, cfenceCount, cpFences)
	__v := (Result)(__ret)
	return __v
}

// GetFenceStatus function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetFenceStatus.html
func GetFenceStatus(device Device, fence Fence) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cfence := *(*C.VkFence)(unsafe.Pointer(&fence))
	__ret := C.callVkGetFenceStatus(cdevice, cfence)
	__v := (Result)(__ret)
	return __v
}

// WaitForFences function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkWaitForFences.html
func WaitForFences(device Device, fenceCount uint32, pFences *Fence, waitAll Bool32, timeout uint64) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cfenceCount := (C.uint32_t)(fenceCount)
	cpFences := (*C.VkFence)(unsafe.Pointer(pFences))
	cwaitAll := (C.VkBool32)(waitAll)
	ctimeout := (C.uint64_t)(timeout)
	__ret := C.callVkWaitForFences(cdevice, cfenceCount, cpFences, cwaitAll, ctimeout)
	__v := (Result)(__ret)
	return __v
}

// CreateSemaphore function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateSemaphore.html
func CreateSemaphore(device Device, pCreateInfo *SemaphoreCreateInfo, pAllocator *AllocationCallbacks, pSemaphore *Semaphore) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpSemaphore := (*C.VkSemaphore)(unsafe.Pointer(pSemaphore))
	__ret := C.callVkCreateSemaphore(
		cdevice,
		(*C.VkSemaphoreCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpSemaphore)
	__v := (Result)(__ret)
	return __v
}

// DestroySemaphore function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroySemaphore.html
func DestroySemaphore(device Device, semaphore Semaphore, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	csemaphore := *(*C.VkSemaphore)(unsafe.Pointer(&semaphore))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroySemaphore(cdevice, csemaphore, cpAllocator)
}

// CreateEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateEvent.html
func CreateEvent(device Device, pCreateInfo *EventCreateInfo, pAllocator *AllocationCallbacks, pEvent *Event) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpEvent := (*C.VkEvent)(unsafe.Pointer(pEvent))
	__ret := C.callVkCreateEvent(
		cdevice,
		(*C.VkEventCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpEvent)
	__v := (Result)(__ret)
	return __v
}

// DestroyEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyEvent.html
func DestroyEvent(device Device, event Event, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cevent := *(*C.VkEvent)(unsafe.Pointer(&event))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyEvent(cdevice, cevent, cpAllocator)
}

// GetEventStatus function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetEventStatus.html
func GetEventStatus(device Device, event Event) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cevent := *(*C.VkEvent)(unsafe.Pointer(&event))
	__ret := C.callVkGetEventStatus(cdevice, cevent)
	__v := (Result)(__ret)
	return __v
}

// SetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkSetEvent.html
func SetEvent(device Device, event Event) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cevent := *(*C.VkEvent)(unsafe.Pointer(&event))
	__ret := C.callVkSetEvent(cdevice, cevent)
	__v := (Result)(__ret)
	return __v
}

// ResetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetEvent.html
func ResetEvent(device Device, event Event) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cevent := *(*C.VkEvent)(unsafe.Pointer(&event))
	__ret := C.callVkResetEvent(cdevice, cevent)
	__v := (Result)(__ret)
	return __v
}

// CreateQueryPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateQueryPool.html
func CreateQueryPool(device Device, pCreateInfo *QueryPoolCreateInfo, pAllocator *AllocationCallbacks, pQueryPool *QueryPool) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpQueryPool := (*C.VkQueryPool)(unsafe.Pointer(pQueryPool))
	__ret := C.callVkCreateQueryPool(
		cdevice,
		(*C.VkQueryPoolCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpQueryPool)
	__v := (Result)(__ret)
	return __v
}

// DestroyQueryPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyQueryPool.html
func DestroyQueryPool(device Device, queryPool QueryPool, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyQueryPool(cdevice, cqueryPool, cpAllocator)
}

// GetQueryPoolResults function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetQueryPoolResults.html
func GetQueryPoolResults(device Device, queryPool QueryPool, firstQuery uint32, queryCount uint32, dataSize uint, pData unsafe.Pointer, stride DeviceSize, flags QueryResultFlags) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cfirstQuery := (C.uint32_t)(firstQuery)
	cqueryCount := (C.uint32_t)(queryCount)
	cdataSize := (C.size_t)(dataSize)
	cpData := pData
	cstride := (C.VkDeviceSize)(stride)
	cflags := (C.VkQueryResultFlags)(flags)
	__ret := C.callVkGetQueryPoolResults(cdevice, cqueryPool, cfirstQuery, cqueryCount, cdataSize, cpData, cstride, cflags)
	__v := (Result)(__ret)
	return __v
}

// CreateBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateBuffer.html
func CreateBuffer(device Device, pCreateInfo *BufferCreateInfo, pAllocator *AllocationCallbacks, pBuffer *Buffer) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpBuffer := (*C.VkBuffer)(unsafe.Pointer(pBuffer))
	__ret := C.callVkCreateBuffer(
		cdevice,
		(*C.VkBufferCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpBuffer)
	__v := (Result)(__ret)
	return __v
}

// DestroyBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyBuffer.html
func DestroyBuffer(device Device, buffer Buffer, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyBuffer(cdevice, cbuffer, cpAllocator)
}

// CreateBufferView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateBufferView.html
func CreateBufferView(device Device, pCreateInfo *BufferViewCreateInfo, pAllocator *AllocationCallbacks, pView *BufferView) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpView := (*C.VkBufferView)(unsafe.Pointer(pView))
	__ret := C.callVkCreateBufferView(
		cdevice,
		(*C.VkBufferViewCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpView)
	__v := (Result)(__ret)
	return __v
}

// DestroyBufferView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyBufferView.html
func DestroyBufferView(device Device, bufferView BufferView, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cbufferView := *(*C.VkBufferView)(unsafe.Pointer(&bufferView))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyBufferView(cdevice, cbufferView, cpAllocator)
}

// CreateImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateImage.html
func CreateImage(device Device, pCreateInfo *ImageCreateInfo, pAllocator *AllocationCallbacks, pImage *Image) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpImage := (*C.VkImage)(unsafe.Pointer(pImage))
	__ret := C.callVkCreateImage(
		cdevice,
		(*C.VkImageCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpImage)
	__v := (Result)(__ret)
	return __v
}

// DestroyImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyImage.html
func DestroyImage(device Device, image Image, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyImage(cdevice, cimage, cpAllocator)
}

// GetImageSubresourceLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetImageSubresourceLayout.html
func GetImageSubresourceLayout(device Device, image Image, pSubresource *ImageSubresource, pLayout *SubresourceLayout) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	C.callVkGetImageSubresourceLayout(
		cdevice,
		cimage,
		(*C.VkImageSubresource)(unsafe.Pointer(pSubresource)),
		(*C.VkSubresourceLayout)(unsafe.Pointer(pLayout)))
}

// CreateImageView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateImageView.html
func CreateImageView(device Device, pCreateInfo *ImageViewCreateInfo, pAllocator *AllocationCallbacks, pView *ImageView) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpView := (*C.VkImageView)(unsafe.Pointer(pView))
	__ret := C.callVkCreateImageView(
		cdevice,
		(*C.VkImageViewCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpView)
	__v := (Result)(__ret)
	return __v
}

// DestroyImageView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyImageView.html
func DestroyImageView(device Device, imageView ImageView, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cimageView := *(*C.VkImageView)(unsafe.Pointer(&imageView))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyImageView(cdevice, cimageView, cpAllocator)
}

// CreateShaderModule function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateShaderModule.html
func CreateShaderModule(device Device, pCreateInfo *ShaderModuleCreateInfo, pAllocator *AllocationCallbacks, pShaderModule *ShaderModule) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpShaderModule := (*C.VkShaderModule)(unsafe.Pointer(pShaderModule))
	__ret := C.callVkCreateShaderModule(
		cdevice,
		(*C.VkShaderModuleCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpShaderModule)
	__v := (Result)(__ret)
	return __v
}

// DestroyShaderModule function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyShaderModule.html
func DestroyShaderModule(device Device, shaderModule ShaderModule, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cshaderModule := *(*C.VkShaderModule)(unsafe.Pointer(&shaderModule))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyShaderModule(cdevice, cshaderModule, cpAllocator)
}

// CreatePipelineCache function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreatePipelineCache.html
func CreatePipelineCache(device Device, pCreateInfo *PipelineCacheCreateInfo, pAllocator *AllocationCallbacks, pPipelineCache *PipelineCache) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpPipelineCache := (*C.VkPipelineCache)(unsafe.Pointer(pPipelineCache))
	__ret := C.callVkCreatePipelineCache(
		cdevice,
		(*C.VkPipelineCacheCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpPipelineCache)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineCache function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyPipelineCache.html
func DestroyPipelineCache(device Device, pipelineCache PipelineCache, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpipelineCache := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyPipelineCache(cdevice, cpipelineCache, cpAllocator)
}

// GetPipelineCacheData function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPipelineCacheData.html
func GetPipelineCacheData(device Device, pipelineCache PipelineCache, pDataSize *uint, pData unsafe.Pointer) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpipelineCache := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache))
	cpDataSize := (*C.size_t)(unsafe.Pointer(pDataSize))
	cpData := pData
	__ret := C.callVkGetPipelineCacheData(cdevice, cpipelineCache, cpDataSize, cpData)
	__v := (Result)(__ret)
	return __v
}

// MergePipelineCaches function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkMergePipelineCaches.html
func MergePipelineCaches(device Device, dstCache PipelineCache, srcCacheCount uint32, pSrcCaches *PipelineCache) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cdstCache := *(*C.VkPipelineCache)(unsafe.Pointer(&dstCache))
	csrcCacheCount := (C.uint32_t)(srcCacheCount)
	cpSrcCaches := (*C.VkPipelineCache)(unsafe.Pointer(pSrcCaches))
	__ret := C.callVkMergePipelineCaches(cdevice, cdstCache, csrcCacheCount, cpSrcCaches)
	__v := (Result)(__ret)
	return __v
}

// CreateGraphicsPipelines function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateGraphicsPipelines.html
func CreateGraphicsPipelines(device Device, pipelineCache PipelineCache, createInfoCount uint32, pCreateInfos *GraphicsPipelineCreateInfo, pAllocator *AllocationCallbacks, pPipelines *Pipeline) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpipelineCache := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache))
	ccreateInfoCount := (C.uint32_t)(createInfoCount)
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpPipelines := (*C.VkPipeline)(unsafe.Pointer(pPipelines))
	__ret := C.callVkCreateGraphicsPipelines(
		cdevice,
		cpipelineCache,
		ccreateInfoCount,
		(*C.VkGraphicsPipelineCreateInfo)(unsafe.Pointer(pCreateInfos)),
		cpAllocator,
		cpPipelines)
	__v := (Result)(__ret)
	return __v
}

// CreateComputePipelines function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateComputePipelines.html
func CreateComputePipelines(device Device, pipelineCache PipelineCache, createInfoCount uint32, pCreateInfos *ComputePipelineCreateInfo, pAllocator *AllocationCallbacks, pPipelines *Pipeline) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpipelineCache := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache))
	ccreateInfoCount := (C.uint32_t)(createInfoCount)
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpPipelines := (*C.VkPipeline)(unsafe.Pointer(pPipelines))
	__ret := C.callVkCreateComputePipelines(
		cdevice,
		cpipelineCache,
		ccreateInfoCount,
		(*C.VkComputePipelineCreateInfo)(unsafe.Pointer(pCreateInfos)),
		cpAllocator,
		cpPipelines)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipeline function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyPipeline.html
func DestroyPipeline(device Device, pipeline Pipeline, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpipeline := *(*C.VkPipeline)(unsafe.Pointer(&pipeline))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyPipeline(cdevice, cpipeline, cpAllocator)
}

// CreatePipelineLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreatePipelineLayout.html
func CreatePipelineLayout(device Device, pCreateInfo *PipelineLayoutCreateInfo, pAllocator *AllocationCallbacks, pPipelineLayout *PipelineLayout) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpPipelineLayout := (*C.VkPipelineLayout)(unsafe.Pointer(pPipelineLayout))
	__ret := C.callVkCreatePipelineLayout(
		cdevice,
		(*C.VkPipelineLayoutCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpPipelineLayout)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyPipelineLayout.html
func DestroyPipelineLayout(device Device, pipelineLayout PipelineLayout, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpipelineLayout := *(*C.VkPipelineLayout)(unsafe.Pointer(&pipelineLayout))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyPipelineLayout(cdevice, cpipelineLayout, cpAllocator)
}

// CreateSampler function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateSampler.html
func CreateSampler(device Device, pCreateInfo *SamplerCreateInfo, pAllocator *AllocationCallbacks, pSampler *Sampler) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpSampler := (*C.VkSampler)(unsafe.Pointer(pSampler))
	__ret := C.callVkCreateSampler(
		cdevice,
		(*C.VkSamplerCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpSampler)
	__v := (Result)(__ret)
	return __v
}

// DestroySampler function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroySampler.html
func DestroySampler(device Device, sampler Sampler, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	csampler := *(*C.VkSampler)(unsafe.Pointer(&sampler))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroySampler(cdevice, csampler, cpAllocator)
}

// CreateDescriptorSetLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDescriptorSetLayout.html
func CreateDescriptorSetLayout(device Device, pCreateInfo *DescriptorSetLayoutCreateInfo, pAllocator *AllocationCallbacks, pSetLayout *DescriptorSetLayout) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpSetLayout := (*C.VkDescriptorSetLayout)(unsafe.Pointer(pSetLayout))
	__ret := C.callVkCreateDescriptorSetLayout(
		cdevice,
		(*C.VkDescriptorSetLayoutCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpSetLayout)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorSetLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDescriptorSetLayout.html
func DestroyDescriptorSetLayout(device Device, descriptorSetLayout DescriptorSetLayout, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cdescriptorSetLayout := *(*C.VkDescriptorSetLayout)(unsafe.Pointer(&descriptorSetLayout))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyDescriptorSetLayout(cdevice, cdescriptorSetLayout, cpAllocator)
}

// CreateDescriptorPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDescriptorPool.html
func CreateDescriptorPool(device Device, pCreateInfo *DescriptorPoolCreateInfo, pAllocator *AllocationCallbacks, pDescriptorPool *DescriptorPool) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpDescriptorPool := (*C.VkDescriptorPool)(unsafe.Pointer(pDescriptorPool))
	__ret := C.callVkCreateDescriptorPool(
		cdevice,
		(*C.VkDescriptorPoolCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpDescriptorPool)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDescriptorPool.html
func DestroyDescriptorPool(device Device, descriptorPool DescriptorPool, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cdescriptorPool := *(*C.VkDescriptorPool)(unsafe.Pointer(&descriptorPool))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyDescriptorPool(cdevice, cdescriptorPool, cpAllocator)
}

// ResetDescriptorPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetDescriptorPool.html
func ResetDescriptorPool(device Device, descriptorPool DescriptorPool, flags DescriptorPoolResetFlags) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cdescriptorPool := *(*C.VkDescriptorPool)(unsafe.Pointer(&descriptorPool))
	cflags := (C.VkDescriptorPoolResetFlags)(flags)
	__ret := C.callVkResetDescriptorPool(cdevice, cdescriptorPool, cflags)
	__v := (Result)(__ret)
	return __v
}

// AllocateDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkAllocateDescriptorSets.html
func AllocateDescriptorSets(device Device, pAllocateInfo *DescriptorSetAllocateInfo, pDescriptorSets *DescriptorSet) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpDescriptorSets := (*C.VkDescriptorSet)(unsafe.Pointer(pDescriptorSets))
	__ret := C.callVkAllocateDescriptorSets(
		cdevice,
		(*C.VkDescriptorSetAllocateInfo)(unsafe.Pointer(pAllocateInfo)),
		cpDescriptorSets)
	__v := (Result)(__ret)
	return __v
}

// FreeDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFreeDescriptorSets.html
func FreeDescriptorSets(device Device, descriptorPool DescriptorPool, descriptorSetCount uint32, pDescriptorSets *DescriptorSet) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cdescriptorPool := *(*C.VkDescriptorPool)(unsafe.Pointer(&descriptorPool))
	cdescriptorSetCount := (C.uint32_t)(descriptorSetCount)
	cpDescriptorSets := (*C.VkDescriptorSet)(unsafe.Pointer(pDescriptorSets))
	__ret := C.callVkFreeDescriptorSets(cdevice, cdescriptorPool, cdescriptorSetCount, cpDescriptorSets)
	__v := (Result)(__ret)
	return __v
}

// UpdateDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkUpdateDescriptorSets.html
func UpdateDescriptorSets(device Device, descriptorWriteCount uint32, pDescriptorWrites *WriteDescriptorSet, descriptorCopyCount uint32, pDescriptorCopies *CopyDescriptorSet) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cdescriptorWriteCount := (C.uint32_t)(descriptorWriteCount)
	cdescriptorCopyCount := (C.uint32_t)(descriptorCopyCount)
	C.callVkUpdateDescriptorSets(
		cdevice,
		cdescriptorWriteCount,
		(*C.VkWriteDescriptorSet)(unsafe.Pointer(pDescriptorWrites)),
		cdescriptorCopyCount,
		(*C.VkCopyDescriptorSet)(unsafe.Pointer(pDescriptorCopies)))
}

// CreateFramebuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateFramebuffer.html
func CreateFramebuffer(device Device, pCreateInfo *FramebufferCreateInfo, pAllocator *AllocationCallbacks, pFramebuffer *Framebuffer) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpFramebuffer := (*C.VkFramebuffer)(unsafe.Pointer(pFramebuffer))
	__ret := C.callVkCreateFramebuffer(
		cdevice,
		(*C.VkFramebufferCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpFramebuffer)
	__v := (Result)(__ret)
	return __v
}

// DestroyFramebuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyFramebuffer.html
func DestroyFramebuffer(device Device, framebuffer Framebuffer, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cframebuffer := *(*C.VkFramebuffer)(unsafe.Pointer(&framebuffer))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyFramebuffer(cdevice, cframebuffer, cpAllocator)
}

// CreateRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateRenderPass.html
func CreateRenderPass(device Device, pCreateInfo *RenderPassCreateInfo, pAllocator *AllocationCallbacks, pRenderPass *RenderPass) Result {
	const sz = unsafe.Sizeof(RenderPassCreateInfo{})
	s := (*C.VkRenderPassCreateInfo)(runtime.Malloc(sz))
	// Hide from cgo pointer checks
	*s = *(*C.VkRenderPassCreateInfo)(unsafe.Pointer(pCreateInfo))
	res := C.callVkCreateRenderPass(
		*(*C.VkDevice)(unsafe.Pointer(&device)),
		s,
		(*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)),
		(*C.VkRenderPass)(unsafe.Pointer(pRenderPass)))
	runtime.Free(unsafe.Pointer(s), sz)
	return (Result)(res)
}

// DestroyRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyRenderPass.html
func DestroyRenderPass(device Device, renderPass RenderPass, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	crenderPass := *(*C.VkRenderPass)(unsafe.Pointer(&renderPass))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyRenderPass(cdevice, crenderPass, cpAllocator)
}

// GetRenderAreaGranularity function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetRenderAreaGranularity.html
func GetRenderAreaGranularity(device Device, renderPass RenderPass, pGranularity *Extent2D) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	crenderPass := *(*C.VkRenderPass)(unsafe.Pointer(&renderPass))
	C.callVkGetRenderAreaGranularity(
		cdevice,
		crenderPass,
		(*C.VkExtent2D)(unsafe.Pointer(pGranularity)))
}

// CreateCommandPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateCommandPool.html
func CreateCommandPool(device Device, pCreateInfo *CommandPoolCreateInfo, pAllocator *AllocationCallbacks, pCommandPool *CommandPool) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpCommandPool := (*C.VkCommandPool)(unsafe.Pointer(pCommandPool))
	__ret := C.callVkCreateCommandPool(
		cdevice,
		(*C.VkCommandPoolCreateInfo)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpCommandPool)
	__v := (Result)(__ret)
	return __v
}

// DestroyCommandPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyCommandPool.html
func DestroyCommandPool(device Device, commandPool CommandPool, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	ccommandPool := *(*C.VkCommandPool)(unsafe.Pointer(&commandPool))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyCommandPool(cdevice, ccommandPool, cpAllocator)
}

// ResetCommandPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetCommandPool.html
func ResetCommandPool(device Device, commandPool CommandPool, flags CommandPoolResetFlags) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	ccommandPool := *(*C.VkCommandPool)(unsafe.Pointer(&commandPool))
	cflags := (C.VkCommandPoolResetFlags)(flags)
	__ret := C.callVkResetCommandPool(cdevice, ccommandPool, cflags)
	__v := (Result)(__ret)
	return __v
}

// AllocateCommandBuffers function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkAllocateCommandBuffers.html
func AllocateCommandBuffers(device Device, pAllocateInfo *CommandBufferAllocateInfo, pCommandBuffers *CommandBuffer) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cpCommandBuffers := (*C.VkCommandBuffer)(unsafe.Pointer(pCommandBuffers))
	__ret := C.callVkAllocateCommandBuffers(
		cdevice,
		(*C.VkCommandBufferAllocateInfo)(unsafe.Pointer(pAllocateInfo)),
		cpCommandBuffers)
	__v := (Result)(__ret)
	return __v
}

// FreeCommandBuffers function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFreeCommandBuffers.html
func FreeCommandBuffers(device Device, commandPool CommandPool, commandBufferCount uint32, pCommandBuffers *CommandBuffer) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	ccommandPool := *(*C.VkCommandPool)(unsafe.Pointer(&commandPool))
	ccommandBufferCount := (C.uint32_t)(commandBufferCount)
	cpCommandBuffers := (*C.VkCommandBuffer)(unsafe.Pointer(pCommandBuffers))
	C.callVkFreeCommandBuffers(cdevice, ccommandPool, ccommandBufferCount, cpCommandBuffers)
}

// BeginCommandBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkBeginCommandBuffer.html
func BeginCommandBuffer(commandBuffer CommandBuffer, pBeginInfo *CommandBufferBeginInfo) Result {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	__ret := C.callVkBeginCommandBuffer(ccommandBuffer, (*C.VkCommandBufferBeginInfo)(unsafe.Pointer(pBeginInfo)))
	__v := (Result)(__ret)
	return __v
}

// EndCommandBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEndCommandBuffer.html
func EndCommandBuffer(commandBuffer CommandBuffer) Result {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	__ret := C.callVkEndCommandBuffer(ccommandBuffer)
	__v := (Result)(__ret)
	return __v
}

// ResetCommandBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetCommandBuffer.html
func ResetCommandBuffer(commandBuffer CommandBuffer, flags CommandBufferResetFlags) Result {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cflags := (C.VkCommandBufferResetFlags)(flags)
	__ret := C.callVkResetCommandBuffer(ccommandBuffer, cflags)
	__v := (Result)(__ret)
	return __v
}

// CmdBindPipeline function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindPipeline.html
func CmdBindPipeline(commandBuffer CommandBuffer, pipelineBindPoint PipelineBindPoint, pipeline Pipeline) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cpipelineBindPoint := (C.VkPipelineBindPoint)(pipelineBindPoint)
	cpipeline := *(*C.VkPipeline)(unsafe.Pointer(&pipeline))
	C.callVkCmdBindPipeline(ccommandBuffer, cpipelineBindPoint, cpipeline)
}

// CmdSetViewport function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetViewport.html
func CmdSetViewport(commandBuffer CommandBuffer, firstViewport uint32, viewportCount uint32, pViewports *Viewport) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cfirstViewport := (C.uint32_t)(firstViewport)
	cviewportCount := (C.uint32_t)(viewportCount)
	C.callVkCmdSetViewport(
		ccommandBuffer,
		cfirstViewport,
		cviewportCount,
		(*C.VkViewport)(unsafe.Pointer(pViewports)))
}

// CmdSetScissor function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetScissor.html
func CmdSetScissor(commandBuffer CommandBuffer, firstScissor uint32, scissorCount uint32, pScissors *Rect2D) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cfirstScissor := (C.uint32_t)(firstScissor)
	cscissorCount := (C.uint32_t)(scissorCount)
	C.callVkCmdSetScissor(
		ccommandBuffer,
		cfirstScissor,
		cscissorCount,
		(*C.VkRect2D)(unsafe.Pointer(pScissors)))
}

// CmdSetLineWidth function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetLineWidth.html
func CmdSetLineWidth(commandBuffer CommandBuffer, lineWidth float32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	clineWidth := (C.float)(lineWidth)
	C.callVkCmdSetLineWidth(ccommandBuffer, clineWidth)
}

// CmdSetDepthBias function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetDepthBias.html
func CmdSetDepthBias(commandBuffer CommandBuffer, depthBiasConstantFactor float32, depthBiasClamp float32, depthBiasSlopeFactor float32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cdepthBiasConstantFactor := (C.float)(depthBiasConstantFactor)
	cdepthBiasClamp := (C.float)(depthBiasClamp)
	cdepthBiasSlopeFactor := (C.float)(depthBiasSlopeFactor)
	C.callVkCmdSetDepthBias(ccommandBuffer, cdepthBiasConstantFactor, cdepthBiasClamp, cdepthBiasSlopeFactor)
}

// CmdSetBlendConstants function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetBlendConstants.html
func CmdSetBlendConstants(commandBuffer CommandBuffer, blendConstants *[4]float32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cblendConstants := *(**C.float)(unsafe.Pointer(&blendConstants))
	C.callVkCmdSetBlendConstants(ccommandBuffer, cblendConstants)
}

// CmdSetDepthBounds function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetDepthBounds.html
func CmdSetDepthBounds(commandBuffer CommandBuffer, minDepthBounds float32, maxDepthBounds float32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cminDepthBounds := (C.float)(minDepthBounds)
	cmaxDepthBounds := (C.float)(maxDepthBounds)
	C.callVkCmdSetDepthBounds(ccommandBuffer, cminDepthBounds, cmaxDepthBounds)
}

// CmdSetStencilCompareMask function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetStencilCompareMask.html
func CmdSetStencilCompareMask(commandBuffer CommandBuffer, faceMask StencilFaceFlags, compareMask uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cfaceMask := (C.VkStencilFaceFlags)(faceMask)
	ccompareMask := (C.uint32_t)(compareMask)
	C.callVkCmdSetStencilCompareMask(ccommandBuffer, cfaceMask, ccompareMask)
}

// CmdSetStencilWriteMask function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetStencilWriteMask.html
func CmdSetStencilWriteMask(commandBuffer CommandBuffer, faceMask StencilFaceFlags, writeMask uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cfaceMask := (C.VkStencilFaceFlags)(faceMask)
	cwriteMask := (C.uint32_t)(writeMask)
	C.callVkCmdSetStencilWriteMask(ccommandBuffer, cfaceMask, cwriteMask)
}

// CmdSetStencilReference function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetStencilReference.html
func CmdSetStencilReference(commandBuffer CommandBuffer, faceMask StencilFaceFlags, reference uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cfaceMask := (C.VkStencilFaceFlags)(faceMask)
	creference := (C.uint32_t)(reference)
	C.callVkCmdSetStencilReference(ccommandBuffer, cfaceMask, creference)
}

// CmdBindDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindDescriptorSets.html
func CmdBindDescriptorSets(commandBuffer CommandBuffer, pipelineBindPoint PipelineBindPoint, layout PipelineLayout, firstSet uint32, descriptorSetCount uint32, pDescriptorSets *DescriptorSet, dynamicOffsetCount uint32, pDynamicOffsets *uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cpipelineBindPoint := (C.VkPipelineBindPoint)(pipelineBindPoint)
	clayout := *(*C.VkPipelineLayout)(unsafe.Pointer(&layout))
	cfirstSet := (C.uint32_t)(firstSet)
	cdescriptorSetCount := (C.uint32_t)(descriptorSetCount)
	cpDescriptorSets := (*C.VkDescriptorSet)(unsafe.Pointer(pDescriptorSets))
	cdynamicOffsetCount := (C.uint32_t)(dynamicOffsetCount)
	cpDynamicOffsets := (*C.uint32_t)(unsafe.Pointer(pDynamicOffsets))
	C.callVkCmdBindDescriptorSets(ccommandBuffer, cpipelineBindPoint, clayout, cfirstSet, cdescriptorSetCount, cpDescriptorSets, cdynamicOffsetCount, cpDynamicOffsets)
}

// CmdBindIndexBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindIndexBuffer.html
func CmdBindIndexBuffer(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize, indexType IndexType) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	coffset := (C.VkDeviceSize)(offset)
	cindexType := (C.VkIndexType)(indexType)
	C.callVkCmdBindIndexBuffer(ccommandBuffer, cbuffer, coffset, cindexType)
}

// CmdBindVertexBuffers function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindVertexBuffers.html
func CmdBindVertexBuffers(commandBuffer CommandBuffer, firstBinding uint32, bindingCount uint32, pBuffers *Buffer, pOffsets *DeviceSize) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cfirstBinding := (C.uint32_t)(firstBinding)
	cbindingCount := (C.uint32_t)(bindingCount)
	cpBuffers := (*C.VkBuffer)(unsafe.Pointer(pBuffers))
	cpOffsets := (*C.VkDeviceSize)(unsafe.Pointer(pOffsets))
	C.callVkCmdBindVertexBuffers(ccommandBuffer, cfirstBinding, cbindingCount, cpBuffers, cpOffsets)
}

// CmdDraw function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDraw.html
func CmdDraw(commandBuffer CommandBuffer, vertexCount uint32, instanceCount uint32, firstVertex uint32, firstInstance uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cvertexCount := (C.uint32_t)(vertexCount)
	cinstanceCount := (C.uint32_t)(instanceCount)
	cfirstVertex := (C.uint32_t)(firstVertex)
	cfirstInstance := (C.uint32_t)(firstInstance)
	C.callVkCmdDraw(ccommandBuffer, cvertexCount, cinstanceCount, cfirstVertex, cfirstInstance)
}

// CmdDrawIndexed function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDrawIndexed.html
func CmdDrawIndexed(commandBuffer CommandBuffer, indexCount uint32, instanceCount uint32, firstIndex uint32, vertexOffset int32, firstInstance uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cindexCount := (C.uint32_t)(indexCount)
	cinstanceCount := (C.uint32_t)(instanceCount)
	cfirstIndex := (C.uint32_t)(firstIndex)
	cvertexOffset := (C.int32_t)(vertexOffset)
	cfirstInstance := (C.uint32_t)(firstInstance)
	C.callVkCmdDrawIndexed(ccommandBuffer, cindexCount, cinstanceCount, cfirstIndex, cvertexOffset, cfirstInstance)
}

// CmdDrawIndirect function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDrawIndirect.html
func CmdDrawIndirect(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize, drawCount uint32, stride uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	coffset := (C.VkDeviceSize)(offset)
	cdrawCount := (C.uint32_t)(drawCount)
	cstride := (C.uint32_t)(stride)
	C.callVkCmdDrawIndirect(ccommandBuffer, cbuffer, coffset, cdrawCount, cstride)
}

// CmdDrawIndexedIndirect function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDrawIndexedIndirect.html
func CmdDrawIndexedIndirect(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize, drawCount uint32, stride uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	coffset := (C.VkDeviceSize)(offset)
	cdrawCount := (C.uint32_t)(drawCount)
	cstride := (C.uint32_t)(stride)
	C.callVkCmdDrawIndexedIndirect(ccommandBuffer, cbuffer, coffset, cdrawCount, cstride)
}

// CmdDispatch function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDispatch.html
func CmdDispatch(commandBuffer CommandBuffer, x uint32, y uint32, z uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cx := (C.uint32_t)(x)
	cy := (C.uint32_t)(y)
	cz := (C.uint32_t)(z)
	C.callVkCmdDispatch(ccommandBuffer, cx, cy, cz)
}

// CmdDispatchIndirect function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDispatchIndirect.html
func CmdDispatchIndirect(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cbuffer := *(*C.VkBuffer)(unsafe.Pointer(&buffer))
	coffset := (C.VkDeviceSize)(offset)
	C.callVkCmdDispatchIndirect(ccommandBuffer, cbuffer, coffset)
}

// CmdCopyBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyBuffer.html
func CmdCopyBuffer(commandBuffer CommandBuffer, srcBuffer Buffer, dstBuffer Buffer, regionCount uint32, pRegions *BufferCopy) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcBuffer := *(*C.VkBuffer)(unsafe.Pointer(&srcBuffer))
	cdstBuffer := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer))
	cregionCount := (C.uint32_t)(regionCount)
	C.callVkCmdCopyBuffer(
		ccommandBuffer,
		csrcBuffer,
		cdstBuffer,
		cregionCount,
		(*C.VkBufferCopy)(unsafe.Pointer(pRegions)))
}

// CmdCopyImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyImage.html
func CmdCopyImage(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions *ImageCopy) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcImage := *(*C.VkImage)(unsafe.Pointer(&srcImage))
	csrcImageLayout := (C.VkImageLayout)(srcImageLayout)
	cdstImage := *(*C.VkImage)(unsafe.Pointer(&dstImage))
	cdstImageLayout := (C.VkImageLayout)(dstImageLayout)
	cregionCount := (C.uint32_t)(regionCount)
	C.callVkCmdCopyImage(
		ccommandBuffer,
		csrcImage,
		csrcImageLayout,
		cdstImage,
		cdstImageLayout,
		cregionCount,
		(*C.VkImageCopy)(unsafe.Pointer(pRegions)))
}

// CmdBlitImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBlitImage.html
func CmdBlitImage(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions *ImageBlit, filter Filter) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcImage := *(*C.VkImage)(unsafe.Pointer(&srcImage))
	csrcImageLayout := (C.VkImageLayout)(srcImageLayout)
	cdstImage := *(*C.VkImage)(unsafe.Pointer(&dstImage))
	cdstImageLayout := (C.VkImageLayout)(dstImageLayout)
	cregionCount := (C.uint32_t)(regionCount)
	cfilter := (C.VkFilter)(filter)
	C.callVkCmdBlitImage(
		ccommandBuffer,
		csrcImage,
		csrcImageLayout,
		cdstImage,
		cdstImageLayout,
		cregionCount,
		(*C.VkImageBlit)(unsafe.Pointer(pRegions)),
		cfilter)
}

// CmdCopyBufferToImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyBufferToImage.html
func CmdCopyBufferToImage(commandBuffer CommandBuffer, srcBuffer Buffer, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions *BufferImageCopy) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcBuffer := *(*C.VkBuffer)(unsafe.Pointer(&srcBuffer))
	cdstImage := *(*C.VkImage)(unsafe.Pointer(&dstImage))
	cdstImageLayout := (C.VkImageLayout)(dstImageLayout)
	cregionCount := (C.uint32_t)(regionCount)
	C.callVkCmdCopyBufferToImage(
		ccommandBuffer,
		csrcBuffer,
		cdstImage,
		cdstImageLayout,
		cregionCount,
		(*C.VkBufferImageCopy)(unsafe.Pointer(pRegions)))
}

// CmdCopyImageToBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyImageToBuffer.html
func CmdCopyImageToBuffer(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstBuffer Buffer, regionCount uint32, pRegions *BufferImageCopy) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcImage := *(*C.VkImage)(unsafe.Pointer(&srcImage))
	csrcImageLayout := (C.VkImageLayout)(srcImageLayout)
	cdstBuffer := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer))
	cregionCount := (C.uint32_t)(regionCount)
	C.callVkCmdCopyImageToBuffer(
		ccommandBuffer,
		csrcImage,
		csrcImageLayout,
		cdstBuffer,
		cregionCount,
		(*C.VkBufferImageCopy)(unsafe.Pointer(pRegions)))
}

// CmdUpdateBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdUpdateBuffer.html
func CmdUpdateBuffer(commandBuffer CommandBuffer, dstBuffer Buffer, dstOffset DeviceSize, dataSize DeviceSize, pData *uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cdstBuffer := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer))
	cdstOffset := (C.VkDeviceSize)(dstOffset)
	cdataSize := (C.VkDeviceSize)(dataSize)
	cpData := (*C.uint32_t)(unsafe.Pointer(pData))
	C.callVkCmdUpdateBuffer(ccommandBuffer, cdstBuffer, cdstOffset, cdataSize, cpData)
}

// CmdFillBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdFillBuffer.html
func CmdFillBuffer(commandBuffer CommandBuffer, dstBuffer Buffer, dstOffset DeviceSize, size DeviceSize, data uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cdstBuffer := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer))
	cdstOffset := (C.VkDeviceSize)(dstOffset)
	csize := (C.VkDeviceSize)(size)
	cdata := (C.uint32_t)(data)
	C.callVkCmdFillBuffer(ccommandBuffer, cdstBuffer, cdstOffset, csize, cdata)
}

// CmdClearColorImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdClearColorImage.html
func CmdClearColorImage(commandBuffer CommandBuffer, image Image, imageLayout ImageLayout, pColor *ClearColorValue, rangeCount uint32, pRanges *ImageSubresourceRange) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	cimageLayout := (C.VkImageLayout)(imageLayout)
	cpColor := (*C.VkClearColorValue)(unsafe.Pointer(pColor))
	crangeCount := (C.uint32_t)(rangeCount)
	C.callVkCmdClearColorImage(
		ccommandBuffer,
		cimage,
		cimageLayout,
		cpColor,
		crangeCount,
		(*C.VkImageSubresourceRange)(unsafe.Pointer(pRanges)))
}

// CmdClearDepthStencilImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdClearDepthStencilImage.html
func CmdClearDepthStencilImage(commandBuffer CommandBuffer, image Image, imageLayout ImageLayout, pDepthStencil *ClearDepthStencilValue, rangeCount uint32, pRanges *ImageSubresourceRange) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cimage := *(*C.VkImage)(unsafe.Pointer(&image))
	cimageLayout := (C.VkImageLayout)(imageLayout)
	crangeCount := (C.uint32_t)(rangeCount)
	C.callVkCmdClearDepthStencilImage(
		ccommandBuffer,
		cimage,
		cimageLayout,
		(*C.VkClearDepthStencilValue)(unsafe.Pointer(pDepthStencil)),
		crangeCount,
		(*C.VkImageSubresourceRange)(unsafe.Pointer(pRanges)))
}

// CmdClearAttachments function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdClearAttachments.html
func CmdClearAttachments(commandBuffer CommandBuffer, attachmentCount uint32, pAttachments *ClearAttachment, rectCount uint32, pRects *ClearRect) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cattachmentCount := (C.uint32_t)(attachmentCount)
	crectCount := (C.uint32_t)(rectCount)
	C.callVkCmdClearAttachments(
		ccommandBuffer,
		cattachmentCount,
		(*C.VkClearAttachment)(unsafe.Pointer(pAttachments)),
		crectCount,
		(*C.VkClearRect)(unsafe.Pointer(pRects)))
}

// CmdResolveImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdResolveImage.html
func CmdResolveImage(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions *ImageResolve) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcImage := *(*C.VkImage)(unsafe.Pointer(&srcImage))
	csrcImageLayout := (C.VkImageLayout)(srcImageLayout)
	cdstImage := *(*C.VkImage)(unsafe.Pointer(&dstImage))
	cdstImageLayout := (C.VkImageLayout)(dstImageLayout)
	cregionCount := (C.uint32_t)(regionCount)
	C.callVkCmdResolveImage(
		ccommandBuffer,
		csrcImage,
		csrcImageLayout,
		cdstImage,
		cdstImageLayout,
		cregionCount,
		(*C.VkImageResolve)(unsafe.Pointer(pRegions)))
}

// CmdSetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetEvent.html
func CmdSetEvent(commandBuffer CommandBuffer, event Event, stageMask PipelineStageFlags) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cevent := *(*C.VkEvent)(unsafe.Pointer(&event))
	cstageMask := (C.VkPipelineStageFlags)(stageMask)
	C.callVkCmdSetEvent(ccommandBuffer, cevent, cstageMask)
}

// CmdResetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdResetEvent.html
func CmdResetEvent(commandBuffer CommandBuffer, event Event, stageMask PipelineStageFlags) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cevent := *(*C.VkEvent)(unsafe.Pointer(&event))
	cstageMask := (C.VkPipelineStageFlags)(stageMask)
	C.callVkCmdResetEvent(ccommandBuffer, cevent, cstageMask)
}

// CmdWaitEvents function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdWaitEvents.html
func CmdWaitEvents(commandBuffer CommandBuffer, eventCount uint32, pEvents *Event, srcStageMask PipelineStageFlags, dstStageMask PipelineStageFlags, memoryBarrierCount uint32, pMemoryBarriers *MemoryBarrier, bufferMemoryBarrierCount uint32, pBufferMemoryBarriers *BufferMemoryBarrier, imageMemoryBarrierCount uint32, pImageMemoryBarriers *ImageMemoryBarrier) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	ceventCount := (C.uint32_t)(eventCount)
	cpEvents := (*C.VkEvent)(unsafe.Pointer(pEvents))
	csrcStageMask := (C.VkPipelineStageFlags)(srcStageMask)
	cdstStageMask := (C.VkPipelineStageFlags)(dstStageMask)
	cmemoryBarrierCount := (C.uint32_t)(memoryBarrierCount)
	cbufferMemoryBarrierCount := (C.uint32_t)(bufferMemoryBarrierCount)
	cimageMemoryBarrierCount := (C.uint32_t)(imageMemoryBarrierCount)
	C.callVkCmdWaitEvents(
		ccommandBuffer,
		ceventCount,
		cpEvents,
		csrcStageMask,
		cdstStageMask,
		cmemoryBarrierCount,
		(*C.VkMemoryBarrier)(unsafe.Pointer(pMemoryBarriers)),
		cbufferMemoryBarrierCount,
		(*C.VkBufferMemoryBarrier)(unsafe.Pointer(pBufferMemoryBarriers)),
		cimageMemoryBarrierCount,
		(*C.VkImageMemoryBarrier)(unsafe.Pointer(pImageMemoryBarriers)))
}

// CmdPipelineBarrier function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdPipelineBarrier.html
func CmdPipelineBarrier(commandBuffer CommandBuffer, srcStageMask PipelineStageFlags, dstStageMask PipelineStageFlags, dependencyFlags DependencyFlags, memoryBarrierCount uint32, pMemoryBarriers *MemoryBarrier, bufferMemoryBarrierCount uint32, pBufferMemoryBarriers *BufferMemoryBarrier, imageMemoryBarrierCount uint32, pImageMemoryBarriers *ImageMemoryBarrier) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	csrcStageMask := (C.VkPipelineStageFlags)(srcStageMask)
	cdstStageMask := (C.VkPipelineStageFlags)(dstStageMask)
	cdependencyFlags := (C.VkDependencyFlags)(dependencyFlags)
	cmemoryBarrierCount := (C.uint32_t)(memoryBarrierCount)
	cbufferMemoryBarrierCount := (C.uint32_t)(bufferMemoryBarrierCount)
	cimageMemoryBarrierCount := (C.uint32_t)(imageMemoryBarrierCount)
	C.callVkCmdPipelineBarrier(
		ccommandBuffer,
		csrcStageMask,
		cdstStageMask,
		cdependencyFlags,
		cmemoryBarrierCount,
		(*C.VkMemoryBarrier)(unsafe.Pointer(pMemoryBarriers)),
		cbufferMemoryBarrierCount,
		(*C.VkBufferMemoryBarrier)(unsafe.Pointer(pBufferMemoryBarriers)),
		cimageMemoryBarrierCount,
		(*C.VkImageMemoryBarrier)(unsafe.Pointer(pImageMemoryBarriers)))
}

// CmdBeginQuery function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBeginQuery.html
func CmdBeginQuery(commandBuffer CommandBuffer, queryPool QueryPool, query uint32, flags QueryControlFlags) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cquery := (C.uint32_t)(query)
	cflags := (C.VkQueryControlFlags)(flags)
	C.callVkCmdBeginQuery(ccommandBuffer, cqueryPool, cquery, cflags)
}

// CmdEndQuery function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdEndQuery.html
func CmdEndQuery(commandBuffer CommandBuffer, queryPool QueryPool, query uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cquery := (C.uint32_t)(query)
	C.callVkCmdEndQuery(ccommandBuffer, cqueryPool, cquery)
}

// CmdResetQueryPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdResetQueryPool.html
func CmdResetQueryPool(commandBuffer CommandBuffer, queryPool QueryPool, firstQuery uint32, queryCount uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cfirstQuery := (C.uint32_t)(firstQuery)
	cqueryCount := (C.uint32_t)(queryCount)
	C.callVkCmdResetQueryPool(ccommandBuffer, cqueryPool, cfirstQuery, cqueryCount)
}

// CmdWriteTimestamp function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdWriteTimestamp.html
func CmdWriteTimestamp(commandBuffer CommandBuffer, pipelineStage PipelineStageFlagBits, queryPool QueryPool, query uint32) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cpipelineStage := (C.VkPipelineStageFlagBits)(pipelineStage)
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cquery := (C.uint32_t)(query)
	C.callVkCmdWriteTimestamp(ccommandBuffer, cpipelineStage, cqueryPool, cquery)
}

// CmdCopyQueryPoolResults function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyQueryPoolResults.html
func CmdCopyQueryPoolResults(commandBuffer CommandBuffer, queryPool QueryPool, firstQuery uint32, queryCount uint32, dstBuffer Buffer, dstOffset DeviceSize, stride DeviceSize, flags QueryResultFlags) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	cqueryPool := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool))
	cfirstQuery := (C.uint32_t)(firstQuery)
	cqueryCount := (C.uint32_t)(queryCount)
	cdstBuffer := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer))
	cdstOffset := (C.VkDeviceSize)(dstOffset)
	cstride := (C.VkDeviceSize)(stride)
	cflags := (C.VkQueryResultFlags)(flags)
	C.callVkCmdCopyQueryPoolResults(ccommandBuffer, cqueryPool, cfirstQuery, cqueryCount, cdstBuffer, cdstOffset, cstride, cflags)
}

// CmdPushConstants function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdPushConstants.html
func CmdPushConstants(commandBuffer CommandBuffer, layout PipelineLayout, stageFlags ShaderStageFlags, offset uint32, size uint32, pValues unsafe.Pointer) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	clayout := *(*C.VkPipelineLayout)(unsafe.Pointer(&layout))
	cstageFlags := (C.VkShaderStageFlags)(stageFlags)
	coffset := (C.uint32_t)(offset)
	csize := (C.uint32_t)(size)
	cpValues := pValues
	C.callVkCmdPushConstants(ccommandBuffer, clayout, cstageFlags, coffset, csize, cpValues)
}

// CmdBeginRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBeginRenderPass.html
func CmdBeginRenderPass(commandBuffer CommandBuffer, pRenderPassBegin *RenderPassBeginInfo, contents SubpassContents) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	ccontents := (C.VkSubpassContents)(contents)
	C.callVkCmdBeginRenderPass(ccommandBuffer,
		(*C.VkRenderPassBeginInfo)(unsafe.Pointer(pRenderPassBegin)), ccontents)
}

// CmdNextSubpass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdNextSubpass.html
func CmdNextSubpass(commandBuffer CommandBuffer, contents SubpassContents) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	ccontents := (C.VkSubpassContents)(contents)
	C.callVkCmdNextSubpass(ccommandBuffer, ccontents)
}

// CmdEndRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdEndRenderPass.html
func CmdEndRenderPass(commandBuffer CommandBuffer) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	C.callVkCmdEndRenderPass(ccommandBuffer)
}

// CmdExecuteCommands function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdExecuteCommands.html
func CmdExecuteCommands(commandBuffer CommandBuffer, commandBufferCount uint32, pCommandBuffers *CommandBuffer) {
	ccommandBuffer := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer))
	ccommandBufferCount := (C.uint32_t)(commandBufferCount)
	cpCommandBuffers := (*C.VkCommandBuffer)(unsafe.Pointer(pCommandBuffers))
	C.callVkCmdExecuteCommands(ccommandBuffer, ccommandBufferCount, cpCommandBuffers)
}

// DestroySurface function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkDestroySurfaceKHR
func DestroySurface(instance Instance, surface Surface, pAllocator *AllocationCallbacks) {
	cinstance := *(*C.VkInstance)(unsafe.Pointer(&instance))
	csurface := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroySurfaceKHR(cinstance, csurface, cpAllocator)
}

// GetPhysicalDeviceSurfaceSupport function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfaceSupportKHR
func GetPhysicalDeviceSurfaceSupport(physicalDevice PhysicalDevice, queueFamilyIndex uint32, surface Surface, pSupported *Bool32) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cqueueFamilyIndex := (C.uint32_t)(queueFamilyIndex)
	csurface := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface))
	cpSupported := (*C.VkBool32)(unsafe.Pointer(pSupported))
	__ret := C.callVkGetPhysicalDeviceSurfaceSupportKHR(cphysicalDevice, cqueueFamilyIndex, csurface, cpSupported)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceCapabilities function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfaceCapabilitiesKHR
func GetPhysicalDeviceSurfaceCapabilities(physicalDevice PhysicalDevice, surface Surface, pSurfaceCapabilities *SurfaceCapabilities) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	csurface := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface))
	__ret := C.callVkGetPhysicalDeviceSurfaceCapabilitiesKHR(
		cphysicalDevice,
		csurface,
		(*C.VkSurfaceCapabilitiesKHR)(unsafe.Pointer(pSurfaceCapabilities)))
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceFormats function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfaceFormatsKHR
func GetPhysicalDeviceSurfaceFormats(physicalDevice PhysicalDevice, surface Surface, pSurfaceFormatCount *uint32, pSurfaceFormats *SurfaceFormat) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	csurface := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface))
	cpSurfaceFormatCount := (*C.uint32_t)(unsafe.Pointer(pSurfaceFormatCount))
	__ret := C.callVkGetPhysicalDeviceSurfaceFormatsKHR(
		cphysicalDevice,
		csurface,
		cpSurfaceFormatCount,
		(*C.VkSurfaceFormatKHR)(unsafe.Pointer(pSurfaceFormats)))
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfacePresentModes function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfacePresentModesKHR
func GetPhysicalDeviceSurfacePresentModes(physicalDevice PhysicalDevice, surface Surface, pPresentModeCount *uint32, pPresentModes *PresentMode) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	csurface := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface))
	cpPresentModeCount := (*C.uint32_t)(unsafe.Pointer(pPresentModeCount))
	cpPresentModes := (*C.VkPresentModeKHR)(unsafe.Pointer(pPresentModes))
	__ret := C.callVkGetPhysicalDeviceSurfacePresentModesKHR(cphysicalDevice, csurface, cpPresentModeCount, cpPresentModes)
	__v := (Result)(__ret)
	return __v
}

// CreateSwapchain function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateSwapchainKHR
func CreateSwapchain(device Device, pCreateInfo *SwapchainCreateInfo, pAllocator *AllocationCallbacks, pSwapchain *Swapchain) Result {
	res := C.callVkCreateSwapchainKHR(
		*(*C.VkDevice)(unsafe.Pointer(&device)),
		(*C.VkSwapchainCreateInfoKHR)(unsafe.Pointer(pCreateInfo)),
		(*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)),
		(*C.VkSwapchainKHR)(unsafe.Pointer(pSwapchain)))
	return Result(res)
}

// DestroySwapchain function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkDestroySwapchainKHR
func DestroySwapchain(device Device, swapchain Swapchain, pAllocator *AllocationCallbacks) {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cswapchain := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroySwapchainKHR(cdevice, cswapchain, cpAllocator)
}

// GetSwapchainImages function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetSwapchainImagesKHR
func GetSwapchainImages(device Device, swapchain Swapchain, pSwapchainImageCount *uint32, pSwapchainImages *Image) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cswapchain := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain))
	cpSwapchainImageCount := (*C.uint32_t)(unsafe.Pointer(pSwapchainImageCount))
	cpSwapchainImages := (*C.VkImage)(unsafe.Pointer(pSwapchainImages))
	__ret := C.callVkGetSwapchainImagesKHR(cdevice, cswapchain, cpSwapchainImageCount, cpSwapchainImages)
	__v := (Result)(__ret)
	return __v
}

// AcquireNextImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkAcquireNextImageKHR
func AcquireNextImage(device Device, swapchain Swapchain, timeout uint64, semaphore Semaphore, fence Fence, pImageIndex *uint32) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cswapchain := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain))
	ctimeout := (C.uint64_t)(timeout)
	csemaphore := *(*C.VkSemaphore)(unsafe.Pointer(&semaphore))
	cfence := *(*C.VkFence)(unsafe.Pointer(&fence))
	cpImageIndex := (*C.uint32_t)(unsafe.Pointer(pImageIndex))
	__ret := C.callVkAcquireNextImageKHR(cdevice, cswapchain, ctimeout, csemaphore, cfence, cpImageIndex)
	__v := (Result)(__ret)
	return __v
}

// QueuePresent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkQueuePresentKHR
func QueuePresent(queue Queue, pPresentInfo *PresentInfo) Result {
	cqueue := *(*C.VkQueue)(unsafe.Pointer(&queue))
	__ret := C.callVkQueuePresentKHR(
		cqueue,
		(*C.VkPresentInfoKHR)(unsafe.Pointer(pPresentInfo)))
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceDisplayPropertiesKHR
func GetPhysicalDeviceDisplayProperties(physicalDevice PhysicalDevice, pPropertyCount *uint32, pProperties *DisplayProperties) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkGetPhysicalDeviceDisplayPropertiesKHR(
		cphysicalDevice,
		cpPropertyCount,
		(*C.VkDisplayPropertiesKHR)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPlaneProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceDisplayPlanePropertiesKHR
func GetPhysicalDeviceDisplayPlaneProperties(physicalDevice PhysicalDevice, pPropertyCount *uint32, pProperties *DisplayPlaneProperties) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkGetPhysicalDeviceDisplayPlanePropertiesKHR(
		cphysicalDevice,
		cpPropertyCount,
		(*C.VkDisplayPlanePropertiesKHR)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneSupportedDisplays function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetDisplayPlaneSupportedDisplaysKHR
func GetDisplayPlaneSupportedDisplays(physicalDevice PhysicalDevice, planeIndex uint32, pDisplayCount *uint32, pDisplays *Display) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cplaneIndex := (C.uint32_t)(planeIndex)
	cpDisplayCount := (*C.uint32_t)(unsafe.Pointer(pDisplayCount))
	cpDisplays := (*C.VkDisplayKHR)(unsafe.Pointer(pDisplays))
	__ret := C.callVkGetDisplayPlaneSupportedDisplaysKHR(cphysicalDevice, cplaneIndex, cpDisplayCount, cpDisplays)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayModeProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetDisplayModePropertiesKHR
func GetDisplayModeProperties(physicalDevice PhysicalDevice, display Display, pPropertyCount *uint32, pProperties *DisplayModeProperties) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cdisplay := *(*C.VkDisplayKHR)(unsafe.Pointer(&display))
	cpPropertyCount := (*C.uint32_t)(unsafe.Pointer(pPropertyCount))
	__ret := C.callVkGetDisplayModePropertiesKHR(
		cphysicalDevice,
		cdisplay,
		cpPropertyCount,
		(*C.VkDisplayModePropertiesKHR)(unsafe.Pointer(pProperties)))
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayMode function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateDisplayModeKHR
func CreateDisplayMode(physicalDevice PhysicalDevice, display Display, pCreateInfo *DisplayModeCreateInfo, pAllocator *AllocationCallbacks, pMode *DisplayMode) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cdisplay := *(*C.VkDisplayKHR)(unsafe.Pointer(&display))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpMode := (*C.VkDisplayModeKHR)(unsafe.Pointer(pMode))
	__ret := C.callVkCreateDisplayModeKHR(
		cphysicalDevice,
		cdisplay,
		(*C.VkDisplayModeCreateInfoKHR)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpMode)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneCapabilities function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetDisplayPlaneCapabilitiesKHR
func GetDisplayPlaneCapabilities(physicalDevice PhysicalDevice, mode DisplayMode, planeIndex uint32, pCapabilities *DisplayPlaneCapabilities) Result {
	cphysicalDevice := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice))
	cmode := *(*C.VkDisplayModeKHR)(unsafe.Pointer(&mode))
	cplaneIndex := (C.uint32_t)(planeIndex)
	__ret := C.callVkGetDisplayPlaneCapabilitiesKHR(
		cphysicalDevice,
		cmode,
		cplaneIndex,
		(*C.VkDisplayPlaneCapabilitiesKHR)(unsafe.Pointer(pCapabilities)))
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayPlaneSurface function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateDisplayPlaneSurfaceKHR
func CreateDisplayPlaneSurface(instance Instance, pCreateInfo *DisplaySurfaceCreateInfo, pAllocator *AllocationCallbacks, pSurface *Surface) Result {
	cinstance := *(*C.VkInstance)(unsafe.Pointer(&instance))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpSurface := (*C.VkSurfaceKHR)(unsafe.Pointer(pSurface))
	__ret := C.callVkCreateDisplayPlaneSurfaceKHR(
		cinstance,
		(*C.VkDisplaySurfaceCreateInfoKHR)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpSurface)
	__v := (Result)(__ret)
	return __v
}

// CreateSharedSwapchains function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateSharedSwapchainsKHR
func CreateSharedSwapchains(device Device, swapchainCount uint32, pCreateInfos *SwapchainCreateInfo, pAllocator *AllocationCallbacks, pSwapchains *Swapchain) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cswapchainCount := (C.uint32_t)(swapchainCount)
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpSwapchains := (*C.VkSwapchainKHR)(unsafe.Pointer(pSwapchains))
	__ret := C.callVkCreateSharedSwapchainsKHR(
		cdevice,
		cswapchainCount,
		(*C.VkSwapchainCreateInfoKHR)(unsafe.Pointer(pCreateInfos)),
		cpAllocator,
		cpSwapchains)
	__v := (Result)(__ret)
	return __v
}

// CreateDebugReportCallback function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDebugReportCallbackEXT.html
func CreateDebugReportCallback(instance Instance, pCreateInfo *DebugReportCallbackCreateInfo, pAllocator *AllocationCallbacks, pCallback *DebugReportCallback) Result {
	cinstance := *(*C.VkInstance)(unsafe.Pointer(&instance))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	cpCallback := (*C.VkDebugReportCallbackEXT)(unsafe.Pointer(pCallback))
	__ret := C.callVkCreateDebugReportCallbackEXT(
		cinstance,
		(*C.VkDebugReportCallbackCreateInfoEXT)(unsafe.Pointer(pCreateInfo)),
		cpAllocator,
		cpCallback)
	__v := (Result)(__ret)
	return __v
}

// DestroyDebugReportCallback function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDebugReportCallbackEXT.html
func DestroyDebugReportCallback(instance Instance, callback DebugReportCallback, pAllocator *AllocationCallbacks) {
	cinstance := *(*C.VkInstance)(unsafe.Pointer(&instance))
	ccallback := *(*C.VkDebugReportCallbackEXT)(unsafe.Pointer(&callback))
	cpAllocator := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator))
	C.callVkDestroyDebugReportCallbackEXT(cinstance, ccallback, cpAllocator)
}

// DebugReportMessage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDebugReportMessageEXT.html
func DebugReportMessage(instance Instance, flags DebugReportFlags, objectType DebugReportObjectType, object uint64, location uint, messageCode int32, pLayerPrefix *string, pMessage *string) {
	cinstance := *(*C.VkInstance)(unsafe.Pointer(&instance))
	cflags := (C.VkDebugReportFlagsEXT)(flags)
	cobjectType := (C.VkDebugReportObjectTypeEXT)(objectType)
	cobject := (C.uint64_t)(object)
	clocation := (C.size_t)(location)
	cmessageCode := (C.int32_t)(messageCode)
	C.callVkDebugReportMessageEXT(cinstance, cflags, cobjectType, cobject, clocation, cmessageCode, cStr(pLayerPrefix), cStr(pMessage))
}

// GetRefreshCycleDurationGOOGLE function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetRefreshCycleDurationGOOGLE.html
func GetRefreshCycleDurationGOOGLE(device Device, swapchain Swapchain, pDisplayTimingProperties *RefreshCycleDurationGOOGLE) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cswapchain := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain))
	__ret := C.callVkGetRefreshCycleDurationGOOGLE(
		cdevice,
		cswapchain,
		(*C.VkRefreshCycleDurationGOOGLE)(unsafe.Pointer(pDisplayTimingProperties)))
	__v := (Result)(__ret)
	return __v
}

// GetPastPresentationTimingGOOGLE function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPastPresentationTimingGOOGLE.html
func GetPastPresentationTimingGOOGLE(device Device, swapchain Swapchain, pPresentationTimingCount *uint32, pPresentationTimings *PastPresentationTimingGOOGLE) Result {
	cdevice := *(*C.VkDevice)(unsafe.Pointer(&device))
	cswapchain := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain))
	cpPresentationTimingCount := (*C.uint32_t)(unsafe.Pointer(pPresentationTimingCount))
	__ret := C.callVkGetPastPresentationTimingGOOGLE(
		cdevice,
		cswapchain,
		cpPresentationTimingCount,
		(*C.VkPastPresentationTimingGOOGLE)(unsafe.Pointer(pPresentationTimings)))
	__v := (Result)(__ret)
	return __v
}
